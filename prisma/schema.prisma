// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role-specific profiles
  athlete Athlete?
  coach   Coach?
  academy Academy?
  sponsor Sponsor?

  @@map("users")
}

enum UserRole {
  ATHLETE
  COACH
  ACADEMY
  SPONSOR
}

model Athlete {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  sport       String
  region      String
  level       AthleteLevel
  age         Int?
  bio         String?
  profileImage String?
  academyId   String?
  coachId     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  academy     Academy?    @relation(fields: [academyId], references: [id])
  coach       Coach?      @relation(fields: [coachId], references: [id])
  badges      AthleteBadge[]
  tournaments TournamentRegistration[]
  trainingPlans TrainingPlan[]
  progress    AthleteProgress[]

  @@map("athletes")
}

enum AthleteLevel {
  BEGINNER
  INTERMEDIATE
  PRO
}

model Coach {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  sport         String
  experience    Int
  bio           String?
  specialization String?
  profileImage  String?
  academyId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  academy       Academy? @relation(fields: [academyId], references: [id])
  athletes      Athlete[]
  trainingPlans TrainingPlan[]
  athleteProgress AthleteProgress[]

  @@map("coaches")
}

model Academy {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  location        String
  city            String
  state           String
  sports          String[]
  description     String?
  facilities      String[]
  establishedYear Int?
  contactEmail    String?
  contactPhone    String?
  profileImage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  athletes    Athlete[]
  coaches     Coach[]
  tournaments Tournament[]

  @@map("academies")
}

model Sponsor {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  company     String
  industry    String
  budget      String
  contactEmail String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sponsoredTournaments TournamentSponsor[]

  @@map("sponsors")
}

model Tournament {
  id                    String              @id @default(cuid())
  name                  String
  sport                 String
  location              String
  startDate             DateTime
  endDate               DateTime
  registrationDeadline  DateTime
  maxParticipants       Int
  currentParticipants   Int                 @default(0)
  description           String?
  eligibilityLevel      TournamentLevel
  prizePool             String?
  status                TournamentStatus    @default(UPCOMING)
  academyId             String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // Relations
  academy       Academy @relation(fields: [academyId], references: [id])
  registrations TournamentRegistration[]
  sponsors      TournamentSponsor[]
  winners       TournamentWinner[]

  @@map("tournaments")
}

enum TournamentLevel {
  BEGINNER
  INTERMEDIATE
  PRO
  ALL
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model TournamentRegistration {
  id           String   @id @default(cuid())
  tournamentId String
  athleteId    String
  registeredAt DateTime @default(now())
  status       RegistrationStatus @default(REGISTERED)

  // Relations
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  athlete    Athlete    @relation(fields: [athleteId], references: [id])

  @@unique([tournamentId, athleteId])
  @@map("tournament_registrations")
}

enum RegistrationStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
}

model TournamentSponsor {
  id           String @id @default(cuid())
  tournamentId String
  sponsorId    String
  amount       String
  createdAt    DateTime @default(now())

  // Relations
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  sponsor    Sponsor     @relation(fields: [sponsorId], references: [id])

  @@unique([tournamentId, sponsorId])
  @@map("tournament_sponsors")
}

model TournamentWinner {
  id           String @id @default(cuid())
  tournamentId String
  athleteId    String
  position     Int
  prize        String?
  createdAt    DateTime @default(now())

  // Relations
  tournament Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, athleteId])
  @@map("tournament_winners")
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  icon        String
  category    BadgeCategory
  rarity      BadgeRarity
  createdAt   DateTime    @default(now())

  // Relations
  athletes AthleteBadge[]

  @@map("badges")
}

enum BadgeCategory {
  ACHIEVEMENT
  SKILL
  PARTICIPATION
  SPECIAL
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

model AthleteBadge {
  id        String   @id @default(cuid())
  athleteId String
  badgeId   String
  earnedAt  DateTime @default(now())

  // Relations
  athlete Athlete @relation(fields: [athleteId], references: [id])
  badge   Badge   @relation(fields: [badgeId], references: [id])

  @@unique([athleteId, badgeId])
  @@map("athlete_badges")
}

model TrainingPlan {
  id          String            @id @default(cuid())
  athleteId   String
  coachId     String
  title       String
  description String
  duration    Int               // in weeks
  status      TrainingPlanStatus @default(ACTIVE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  athlete   Athlete    @relation(fields: [athleteId], references: [id])
  coach     Coach      @relation(fields: [coachId], references: [id])
  exercises Exercise[]

  @@map("training_plans")
}

enum TrainingPlanStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model Exercise {
  id             String       @id @default(cuid())
  trainingPlanId String
  name           String
  description    String
  sets           Int?
  reps           Int?
  duration       Int?         // in minutes
  restTime       Int?         // in seconds
  completed      Boolean      @default(false)
  order          Int
  createdAt      DateTime     @default(now())

  // Relations
  trainingPlan TrainingPlan @relation(fields: [trainingPlanId], references: [id])

  @@map("exercises")
}

model AthleteProgress {
  id                    String   @id @default(cuid())
  athleteId             String
  coachId               String
  speedImprovement      Float    @default(0)
  accuracyImprovement   Float    @default(0)
  lastTournamentPosition Int?
  notes                 String?
  lastUpdated           DateTime @default(now())

  // Relations
  athlete Athlete @relation(fields: [athleteId], references: [id])
  coach   Coach   @relation(fields: [coachId], references: [id])

  @@unique([athleteId, coachId])
  @@map("athlete_progress")
}

model TrainingProgram {
  id                  String   @id @default(cuid())
  providerId          String
  providerName        String
  title               String
  description         String
  sport               String
  duration            Int      // in weeks
  fees                String
  location            String
  maxParticipants     Int
  currentParticipants Int      @default(0)
  startDate           DateTime
  schedule            String
  level               ProgramLevel
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("training_programs")
}

enum ProgramLevel {
  BEGINNER
  INTERMEDIATE
  PRO
  ALL
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum NotificationType {
  TOURNAMENT
  ASSIGNMENT
  BADGE
  GENERAL
}